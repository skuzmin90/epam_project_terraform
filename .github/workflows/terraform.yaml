name: Terraform

on:
  workflow_dispatch:
    push:
      branches:
        - master
    pull_request:
      branches:
        - master

jobs:
  terraform:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Install Terraform
        env:
          TERRAFORM_VERSION: "1.0.2"
        run: |
          tf_version=$TERRAFORM_VERSION
          wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
          unzip terraform_"$tf_version"_linux_amd64.zip
          sudo mv terraform /usr/local/bin/

      - name: Verify Terraform version
        run: terraform --version

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
#        if: github.event_name == 'pull_request'
        run: terraform plan
#        continue-on-error: true

      - name: Terraform Apply
        id: terraform-apply
        run: terraform apply -auto-approve

      - name: Terraform Output
        id: terraform-output
        run: |
          echo ::set-output name=db_host::$(terraform output db_host)
          echo ::set-output name=db_name::$(terraform output db_name)
          echo ::set-output name=db_user::$(terraform output db_user)
          echo ::set-output name=db_password::$(terraform output db_password)

      - name: Check version
        run: aws --version

      - name: Update config for eks cluster
        run: aws eks update-kubeconfig --name eks

    outputs:
      db_host: "${{ steps.terraform-output.outputs.db_host }}"
      db_name: "${{ steps.terraform-output.outputs.db_name }}"
      db_user: "${{ steps.terraform-output.outputs.db_user }}"
      db_password: "${{ steps.terraform-output.outputs.db_password }}"


#  aws_eks:
#    needs: [terraform]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Setup Terraform
#        uses: hashicorp/setup-terraform@v1
#        with:
#          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
#          terraform_wrapper: false
#
#      - name: Terraform Init
#        id: init
#        run: terraform init
#
#      - name: Terraform Validate
#        id: validate
#        run: terraform validate -no-color
#
#      - name: Check version
#        run: aws --version
#
#      - name: Update config for eks cluster
#        run: aws eks update-kubeconfig --name eks

  k8s:
    needs: [terraform]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set env
        run: |
          echo "DB_HOST=${{ needs.terraform.outputs.db_host }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ needs.terraform.outputs.db_name }}" >> $GITHUB_ENV
          echo "DB_USER=${{ needs.terraform.outputs.db_user }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ needs.terraform.outputs.db_password }}" >> $GITHUB_ENV

      - name: Get all nodes
        run: kubectl get nodes

      - name: Create flask-webapp Deployment
        working-directory: ./k8s
        run: |
          cat webapp.yaml | envsubst | kubectl apply -f -
          kubectl get all




        #      - name: Update Pull Request
#        uses: actions/github-script@0.9.0
#        if: github.event_name == 'pull_request'
#        env:
#          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          script: |
#            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#
#            <details><summary>Show Plan</summary>
#
#            \`\`\`\n
#            ${process.env.PLAN}
#            \`\`\`
#
#            </details>
#
#            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
#
#            github.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: output
#            })

#      - name: Terraform Plan Status
#        if: steps.plan.outcome == 'failure'
#        run: exit 1