name: Terraform

on:
  workflow_dispatch:
    push:
      branches:
        - master
    pull_request:
      branches:
        - master

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Install Terraform
        env:
          TERRAFORM_VERSION: "1.0.2"
        run: |
          tf_version=$TERRAFORM_VERSION
          wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
          unzip terraform_"$tf_version"_linux_amd64.zip
          sudo mv terraform /usr/local/bin/

      - name: Verify Terraform version
        run: terraform --version

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
#        if: github.event_name == 'pull_request'
        run: terraform plan
#        continue-on-error: true

      - name: Terraform_Apply
        run: terraform apply -auto-approve

  aws_eks:
    needs: [terraform]
    runs-on: ubuntu-latest
    steps:
#      - name: Install AWS-cli
#        run: |
#          curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
#          unzip -qq awscliv2.zip
#          sudo ./aws/install

      - name: Check version
        run: aws --version

#      - name: Update config for eks cluster
#        run: aws.exe eks --region us-east-1 update-kubeconfig --name eks

      - name: Run echo from previous step
        run: echo "${{ steps.Terraform_Apply.output.vpc_id }}"



        #      - name: Update Pull Request
#        uses: actions/github-script@0.9.0
#        if: github.event_name == 'pull_request'
#        env:
#          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          script: |
#            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#
#            <details><summary>Show Plan</summary>
#
#            \`\`\`\n
#            ${process.env.PLAN}
#            \`\`\`
#
#            </details>
#
#            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
#
#            github.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: output
#            })

#      - name: Terraform Plan Status
#        if: steps.plan.outcome == 'failure'
#        run: exit 1