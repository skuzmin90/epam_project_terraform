name: Terraform

on:
  workflow_dispatch:
    push:
      branches:
        - master
    pull_request:
      branches:
        - master

jobs:
  terraform:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Install Terraform
        env:
          TERRAFORM_VERSION: "1.0.2"
        run: |
          tf_version=$TERRAFORM_VERSION
          wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
          unzip terraform_"$tf_version"_linux_amd64.zip
          sudo mv terraform /usr/local/bin/

      - name: Verify Terraform version
        run: terraform --version

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
#        if: github.event_name == 'pull_request'
        run: terraform plan
#        continue-on-error: true

      - name: Terraform Apply
        id: terraform-apply
        run: terraform apply -auto-approve

      - name: Terraform Output
        id: terraform-output
        run: |
          echo ::set-output name=eks_cluster_name::$(terraform output eks_cluster_name)

    outputs:
      eks_cluster_name: "${{ steps.terraform-output.outputs.eks_cluster_name }}"

  aws_eks:
    needs: [terraform]
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check version
        run: aws --version

      - name: Update config for eks cluster
        run: aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name eks
        continue-on-error: true

      - name: Create namespaces
        env:
          EKS_NAME: ${{ needs.terraform.outputs.eks_cluster_name }}
          REGION: ${{ secrets.AWS_REGION }}
        working-directory: ./k8s
        run: |
          kubectl create namespace prod && kubectl create namespace test
          cat amazon-cloudwatch.yaml | sed "s/{{cluster_name}}/$EKS_NAME/;s/{{region_name}}/$REGION/" | kubectl apply -f -
          kubectl apply -f metrics-server.yaml